#!/usr/bin/env python

import os
import sys
import logging

logging.basicConfig(filename="./s82.log", level=logging.INFO)


if __name__ == "__main__":
    action = sys.argv[1]

    if action == "fill-db":
        import populate_db
        populate_db.main(sys.argv[2:])
        sys.exit(0)

    if action == "process":
        import preprocess
        preprocess.main(sys.argv[2:])
        sys.exit(0)

    if action == "index":
        sys.path.append(os.path.abspath(os.path.join(__file__, '..', '..')))
        from calibration import models
        models._build_indices()
        sys.exit(0)

    # Start by parsing the command line arguments.
    import argparse
    desc = "Just a little SDSS Stripe 82."
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("action", type=str,
            help="What do you want to do?",
            choices=["fill-db", "process", "photometry", "calibration"])
    parser.add_argument("-b", "--band", type=str, help="Which band?",
            default="g")
    parser.add_argument("-t", "--threads", type=int, default=12,
            help="How many processes should be use?")
    args = parser.parse_args()

    if args.action in ["photometry", "calibration"]:
        sys.path.append(os.path.abspath(os.path.join(__file__, '..', '..')))
        from calibration import models
        from multiprocessing import Pool
        pool = Pool(args.threads)

    if args.action == "photometry":
        runs = [r.doc for r in models.Run.find(q="band = %s",
            args=["ugriz".index(args.band)])]
        pool.map(models._do_photo, runs)
        sys.exit(0)

    if args.action == "calibration":
        import numpy as np

        band = "ugriz".index(args.band)

        crun = models.CalibRun.new(band)
        crun.save()
        calibid = crun["id"]

        ras = np.arange(-25, 0.0, 0.08)
        decs = np.arange(-1.1, 1.2, 0.1)
        targets = [{"ra": ra, "dec": dec, "rng": [0.08, 0.1],
            "band": band, "calibid": calibid}
                                    for ra in ras for dec in decs]
        pool.map(models._do_calib, targets)
        sys.exit(0)
